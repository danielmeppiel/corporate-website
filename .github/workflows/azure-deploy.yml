name: Deploy to Azure

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      force_deploy:
        description: 'Force deployment without confirmation'
        required: false
        default: false
        type: boolean

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Job to determine deployment environment
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" && "${{ github.event_name }}" == "push" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Job to validate and build the application
  build-and-validate:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --omit=dev --ignore-scripts

      - name: Build frontend
        run: npm run build

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate Python backend
        run: |
          cd backend
          python -m py_compile api/users.py
          cd ../server
          python -m py_compile contact_handler.py

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            backend/
            server/
          retention-days: 1

  # Job to validate Bicep templates
  validate-infrastructure:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Bicep templates
        run: |
          az bicep build --file infrastructure/bicep/main.bicep
          az bicep build --file infrastructure/bicep/modules/static-web-app.bicep
          az bicep build --file infrastructure/bicep/modules/function-app.bicep
          az bicep build --file infrastructure/bicep/modules/cosmos-db.bicep
          az bicep build --file infrastructure/bicep/modules/storage.bicep
          az bicep build --file infrastructure/bicep/modules/key-vault.bicep
          az bicep build --file infrastructure/bicep/modules/monitoring.bicep
          az bicep build --file infrastructure/bicep/modules/cdn.bicep

      - name: Validate deployment template
        run: |
          ./scripts/deploy.sh \
            --environment ${{ needs.determine-environment.outputs.environment }} \
            --location eastus \
            --validate-only

  # Job to run security scans
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan on Python code
        run: |
          pip install bandit
          bandit -r backend/ server/ -f json -o bandit-report.json || true

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --output json > npm-audit.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            npm-audit.json
          retention-days: 30

  # Job to deploy to Azure
  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-validate, validate-infrastructure, security-scan]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure
        run: |
          ./scripts/deploy.sh \
            --environment ${{ needs.determine-environment.outputs.environment }} \
            --location eastus \
            --force

      - name: Get deployment outputs
        id: deploy-outputs
        run: |
          RG_NAME="rg-corporate-website-${{ needs.determine-environment.outputs.environment }}"
          DEPLOYMENT_NAME=$(az deployment group list --resource-group $RG_NAME --query '[0].name' -o tsv)
          
          # Get Static Web App URL
          SWA_URL=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.staticWebAppUrl.value' -o tsv)
          echo "static_web_app_url=$SWA_URL" >> $GITHUB_OUTPUT
          
          # Get Function App URL
          FUNC_URL=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.functionAppUrl.value' -o tsv)
          echo "function_app_url=$FUNC_URL" >> $GITHUB_OUTPUT
          
          # Get estimated costs
          COST=$(az deployment group show --resource-group $RG_NAME --name $DEPLOYMENT_NAME --query 'properties.outputs.estimatedMonthlyCost.value.totalEstimated' -o tsv)
          echo "estimated_monthly_cost=$COST" >> $GITHUB_OUTPUT

      - name: Deploy Function App code
        run: |
          # Package Python function app
          cd backend
          pip install --target .python_packages/lib/site-packages -r requirements.txt
          zip -r ../function-app.zip .
          cd ..
          
          # Deploy to Function App
          FUNC_APP_NAME=$(az functionapp list --resource-group rg-corporate-website-${{ needs.determine-environment.outputs.environment }} --query '[0].name' -o tsv)
          az functionapp deployment source config-zip --resource-group rg-corporate-website-${{ needs.determine-environment.outputs.environment }} --name $FUNC_APP_NAME --src function-app.zip

      - name: Deployment Summary
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## üöÄ Deployment Completed Successfully
          
          **Environment**: ${{ needs.determine-environment.outputs.environment }}
          **Deployment Time**: $(date)
          
          ### üåê Application URLs
          - **Frontend**: ${{ steps.deploy-outputs.outputs.static_web_app_url }}
          - **Backend API**: ${{ steps.deploy-outputs.outputs.function_app_url }}
          
          ### üí∞ Cost Information
          - **Estimated Monthly Cost**: \$${{ steps.deploy-outputs.outputs.estimated_monthly_cost }} USD
          
          ### üìä Resources Deployed
          - ‚úÖ Static Web App (Frontend)
          - ‚úÖ Azure Functions (Backend API)
          - ‚úÖ Cosmos DB (Database)
          - ‚úÖ Storage Account (Assets & Logs)
          - ‚úÖ Key Vault (Secrets)
          - ‚úÖ Application Insights (Monitoring)
          ${{ needs.determine-environment.outputs.environment == 'prod' && '- ‚úÖ Azure CDN (Global Delivery)' || '' }}
          
          ### üîó Management Links
          - [Azure Portal](https://portal.azure.com/#@/resource/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-corporate-website-${{ needs.determine-environment.outputs.environment }})
          - [Cost Management](https://portal.azure.com/#blade/Microsoft_Azure_CostManagement/Menu/overview)
          EOF

  # Job to run post-deployment tests
  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test frontend availability
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Test Static Web App
          SWA_URL="${{ needs.deploy.outputs.static_web_app_url }}"
          curl -f -s -o /dev/null -w "%{http_code}" "https://$SWA_URL" || exit 1
          echo "‚úÖ Frontend is responding"

      - name: Test backend API health
        run: |
          # Test Function App health endpoint
          FUNC_URL="${{ needs.deploy.outputs.function_app_url }}"
          curl -f -s -o /dev/null -w "%{http_code}" "$FUNC_URL/api/health" || echo "‚ö†Ô∏è Health endpoint not yet available"

      - name: Run accessibility tests
        run: |
          # Install accessibility testing tools
          npm install -g pa11y
          
          # Test main pages for WCAG compliance
          SWA_URL="${{ needs.deploy.outputs.static_web_app_url }}"
          pa11y "https://$SWA_URL" --level AA || echo "‚ö†Ô∏è Accessibility issues found"

  # Job to create deployment notification
  notify:
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, post-deployment-tests]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Create deployment issue
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `‚úÖ Deployment Successful - ${{ needs.determine-environment.outputs.environment }} environment`;
            const body = `
            ## Deployment Summary
            
            **Environment**: ${{ needs.determine-environment.outputs.environment }}
            **Commit**: ${{ github.sha }}
            **Workflow**: ${{ github.run_id }}
            
            ### URLs
            - Frontend: ${{ needs.deploy.outputs.static_web_app_url }}
            - Backend: ${{ needs.deploy.outputs.function_app_url }}
            
            ### Cost
            - Estimated Monthly: \$${{ needs.deploy.outputs.estimated_monthly_cost }} USD
            
            This issue was automatically created by the deployment workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'success', '${{ needs.determine-environment.outputs.environment }}']
            });

      - name: Report deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `‚ùå Deployment Failed - ${{ needs.determine-environment.outputs.environment }} environment`;
            const body = `
            ## Deployment Failure
            
            **Environment**: ${{ needs.determine-environment.outputs.environment }}
            **Commit**: ${{ github.sha }}
            **Workflow**: ${{ github.run_id }}
            
            The deployment to ${{ needs.determine-environment.outputs.environment }} environment has failed.
            Please check the workflow logs for details.
            
            This issue was automatically created by the deployment workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'failure', '${{ needs.determine-environment.outputs.environment }}']
            });